/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	création : 13 février 2002
 *
 *     nature : projet etudiant
 *
 */


options{
	JDK_VERSION="1.5";	
}

PARSER_BEGIN(Yaka)



public class Yaka {

	static Expression exp;
	
  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;

    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      msg = msg.substring(0,msg.indexOf("\n"));
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots réservés*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">

}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{

   <PROGRAMME> <ident>	{yvmAsm.entete(YakaTokenManager.identLu);}

   bloc()
   <FPROGRAMME> 
}

void bloc() : {}{
 (declConst())*
 (declVar())*		
   suiteExpr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
	
  <ident> {declaration.setSaveName() = YakaTokenManager.identLu;}
   "=" valConst()
    
}

void valConst() : {}{
  <entier> 	{tabIdent.rangeIdent(declaration.getSaveName(), declaration.createIdentConst(ENTIER, YakaTokenManager.entierLu));}
 | <ident>	{	if(tabIdent.existeIdent(YakaTokenManager.identLu)){
 					tabIdent.rangeIdent(declaration.getSaveName(), tabIdent.chercheIdent(YakaTokenManager.identLu));
 				}else System.out.println("Erreur : Variable non déclarée");
 			}	
 | <VRAI> 	{tabIdent.rangeIdent(declaration.getSaveName(), declaration.createIdentConst(BOOLEEN, VRAI));}	
 | <FAUX> 	{tabIdent.rangeIdent(declaration.getSaveName(), declaration.createIdentConst(BOOLEEN, FAUX));}	

}


void declVar() : {}
{
  <VAR> type()	
  <ident>		
  ("," 
      <ident>  
  )* ";"
	
}

void type() :{}
{
   <ENTIER>			
 | <BOOLEEN>
}
/*
 * Syntaxe des instructions.
 */
void suiteExpr() : {}
{ (expression() (";" (expression())? )*)? }



/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel()
  simpleExpr() {exp.testType2Argv();}

  )?
}



void simpleExpr() : {}
{
   terme() 
   (opAdd()
   terme() {exp.testType2Argv();}

   )*
} 
void terme() : {}
{
  facteur() 
  (opMul()
  facteur()	{exp.testType2Argv();}

  )*
}
void facteur() : {}
{   primaire() 
  |  opNeg() primaire() {exp.testType1Argv();} 
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}

{ <entier> {exp.saveType(Expression.tip.ENTIER);} 		
 | <ident> 	{exp.saveType(TabIdent.chercheIdent(YakaTokenManager.identLu).getType());}	
 | <VRAI> 	{exp.saveType(Expression.tip.BOOL);} 
 | <FAUX> 	{exp.saveType(Expression.tip.BOOL);} 

 
}

void opRel() : {}
{

   "=" 		{exp.saveOp(Expression.op.EGAL);}
 | "<>" 	{exp.saveOp(Expression.op.DIFF);}
 | "<" 		{exp.saveOp(Expression.op.INF);}
 | "<=" 	{exp.saveOp(Expression.op.INFEGAL);}
 | ">" 		{exp.saveOp(Expression.op.SUP);}
 | ">=" 	{exp.saveOp(Expression.op.SUPEGAL);}

} 

void opAdd() : {}
{

    "+"	 {exp.saveOp(Expression.op.PLUS);}	
  |  "-" {exp.saveOp(Expression.op.MOINS);}	
  | <OU> {exp.saveOp(Expression.op.OU);}	

}

void opMul() : {}
{

  "*"	{exp.saveOp(Expression.op.MUL);}	
  | "/"	{exp.saveOp(Expression.op.DIV);}	
  | <ET> {exp.saveOp(Expression.op.ET);}	

} 

void opNeg() : {}
{ 
 "-" 		{exp.saveOp(Expression.op.MOINS);}	
 | <NON>	{exp.saveOp(Expression.op.NON);}
}


