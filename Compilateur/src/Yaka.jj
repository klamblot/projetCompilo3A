/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	creation : 13 fevrier 2002
 *
 *     nature : projet etudiant
 *
 */
PARSER_BEGIN(Yaka)



public class Yaka {

	static Expression exp = new Expression();
	static Declaration declaration = new Declaration();
	static TabIdent tabIdent = new TabIdent();
	static YVM yvm = new YVM();
	static YVMasm yvmAsm = new YVMasm();
	
	static int taille = 0;

	static String typeAffect,typeRetourFct,nomFct;
	static boolean inMain = false;

	static EtiqUtil ite = new EtiqUtil();
	static EtiqUtil cond = new EtiqUtil();
	static FoncUtil fonc = new FoncUtil();

  public static void main(String args[]) { 
    Yaka analyseur;
    java.io.InputStream input;
	
    if (args.length==1) {
      System.out.print(args[args.length-1] + ": ");
      try {
        input = new java.io.FileInputStream(args[args.length-1]+".yaka");
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Fichier introuvable.");
        return;
      }
    } else if (args.length==0) {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    } else {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try {
      analyseur = new Yaka(input);
      analyseur.analyse();
      System.out.println("analyse syntaxique reussie!");
    } catch (ParseException e) {
      String msg = e.getMessage();
      /*msg = msg.substring(0,msg.indexOf("\n"));*/
      System.out.println("Erreur de syntaxe : "+msg);
    }
  } 
}

PARSER_END(Yaka)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}


/* Mots reserves*/

TOKEN :
{
  < BOOLEEN: "BOOLEEN" >
| < VAR: "VAR" >
| < FAIRE: "FAIRE" >
| < SINON: "SINON" >
| < POUR: "POUR" >
| < SI: "SI" >
| < FSI: "FSI">
| < ENTIER: "ENTIER" >
| < RETOURNE: "RETOURNE" >
| < VRAI: "VRAI" >
| < TANTQUE: "TANTQUE" >
| <CONST : "CONST">
| <FAUX : "FAUX">
| <FAIT : "FAIT">
| <OU : "OU">
| <ET : "ET">
| <NON : "NON">
| <FONCTION : "FONCTION">
| <FFONCTION  : "FFONCTION">
| <PROGRAMME : "PROGRAMME" >
| <FPROGRAMME: "FPROGRAMME" >
| <PRINCIPAL : "PRINCIPAL">
| <FPRINCIPAL : "FPRINCIPAL">
| <ALORS : "ALORS">
| <ECRIRE : "ECRIRE">
| <LIRE : "LIRE">
| <ALALIGNE : "ALALIGNE">


}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/
void analyse() : {}
{

   <PROGRAMME> <ident>	{	yvm.entete(YakaTokenManager.identLu);
   							yvmAsm.entete(YakaTokenManager.identLu);}
   (declFonction())*
   <PRINCIPAL> {inMain = true;
   					yvm.etiquetteFonc("main");
   					yvmAsm.etiquetteFonc("main");
   			   }
   bloc()
   <FPRINCIPAL>
   <FPROGRAMME> { yvm.queue();
   				  yvmAsm.queue();}
}

void bloc() : {}{
 (declConst())*
 (declVar())*	{
					yvm.ouvreBloc(taille);
 					yvmAsm.ouvreBloc(taille);

 				}	
   suiteInstr() 
}

void declConst() : {}
{
  <CONST>  defConst() ( "," defConst())* ";"
}

void defConst() : {}
{
  <ident> {declaration.setSaveName(YakaTokenManager.identLu);}
   "=" valConst()   

}

void valConst() : {}{

  <entier> 	{	

  				if(tabIdent.existeIdentLoc(declaration.getSaveName())){
  					System.out.println("Erreur : Constante deja  declaree");
  				}else{
  					tabIdent.rangeIdentLoc(declaration.getSaveName(), declaration.createIdentConst("ENTIER", YakaTokenManager.entierLu));
  				}
  			}
 | <ident>	{	

 				if(tabIdent.existeIdentLoc(declaration.getSaveName())){
  						System.out.println("Erreur : Variable deja  declaree");
  				}else{
 					if(tabIdent.existeIdentLoc(YakaTokenManager.identLu)){
 						tabIdent.rangeIdentLoc(declaration.getSaveName(), tabIdent.chercheIdentGlob(YakaTokenManager.identLu));
 					}else {
 						System.out.println("Erreur : Variable non declaree");
 					}
 				}
 			}	
 | <VRAI> 	{

 				if(tabIdent.existeIdentLoc(declaration.getSaveName())){
  					System.out.println("Erreur : Variable deja  declaree");
  				}else{
 					tabIdent.rangeIdentLoc(declaration.getSaveName(), declaration.createIdentConst("BOOLEEN", -1));
 				}
 			}	
 | <FAUX> 	{


 				if(tabIdent.existeIdentLoc(declaration.getSaveName())){
  					System.out.println("Erreur : Variable deja  declaree");
  				}else{
 					tabIdent.rangeIdentLoc(declaration.getSaveName(), declaration.createIdentConst("BOOLEEN", 0));
 				}	
			}
}


void declVar() : {}
{
  <VAR> type()	
  <ident>		{
  					if(tabIdent.existeIdentLoc(YakaTokenManager.identLu)){
  						System.out.println("Erreur : Variable deja  declaree");
  					}else{
  						tabIdent.rangeIdentLoc(YakaTokenManager.identLu, declaration.createIdentVar(declaration.getSaveName()));
  						taille += 2;
  					}
  				}	
  ("," 
      <ident> 	{

					if(tabIdent.existeIdentLoc(YakaTokenManager.identLu)){
  						System.out.println("Erreur : Variable deja declaree");

  					}else{
  						tabIdent.rangeIdentLoc(YakaTokenManager.identLu, declaration.createIdentVar(declaration.getSaveName()));
  						taille +=2;
  					}
				}
  )* ";"
	
}

void type() :{}
{

   <ENTIER> 	{declaration.setSaveName("ENTIER");} 		
 | <BOOLEEN>	{declaration.setSaveName("BOOLEEN");}	

}


/*
 * Syntaxe des instructions.
 */

void suiteInstr() : {}
{ 
(instruction() (";" (instruction())? )*) 
}

void instruction() : {}
{
  affectation()
 |lecture()
 |ecriture()
 |iteration()	
 |conditionnelle()
 |retourne()

}

void affectation() : {}
{

  <ident> 	{	
  				declaration.setSaveName(YakaTokenManager.identLu);
  				if(tabIdent.existeIdentLoc(declaration.getSaveName())){
  					typeAffect = tabIdent.chercheIdentLoc(declaration.getSaveName()).getType();
  				}else{ 
  					System.out.println("Erreur : Variable non declaree");
  				}
  			}
  "=" expression() {
  						if(tabIdent.existeIdentLoc(declaration.getSaveName())){
	  						if(tabIdent.chercheIdentLoc(declaration.getSaveName()) instanceof IdVar){
		  						if(typeAffect.equals(exp.tipToString(exp.popType()))){
		  							yvm.istore(((IdVar)tabIdent.chercheIdentLoc(declaration.getSaveName())).getOffset());
		  							yvmAsm.istore(((IdVar)tabIdent.chercheIdentLoc(declaration.getSaveName())).getOffset());
		  						}else{
		  							System.out.println("erreur de type au niveau de l'affectation");
								}
							}else{
								System.out.println("Erreur : Affectation impossible pour une constante");
							}
						}
					}
}

void lecture() : {}
{
  <LIRE> "(" <ident> {
  						if(tabIdent.existeIdentLoc(YakaTokenManager.identLu)){
	  						yvm.lireEnt(((IdVar)tabIdent.chercheIdentLoc(YakaTokenManager.identLu)).getOffset());
	  						yvmAsm.lireEnt(((IdVar)tabIdent.chercheIdentLoc(YakaTokenManager.identLu)).getOffset());
	  					}else{
	  						System.out.println("Erreur : Variable non declaree");
	  					}
  					  }
  ")" 
}

void ecriture() : {}
{
  <ECRIRE> "(" (expression() {
  								if("ENTIER".equals(exp.tipToString(exp.peekType()))){
  									yvm.ecrireEnt();
  									yvmAsm.ecrireEnt();
  								}else if("BOOLEEN".equals(exp.tipToString(exp.peekType()))){
  									yvm.ecrireBool();
  									yvmAsm.ecrireBool();
  								}
  								exp.popType();
  							 } 
  							
  | <chaine>				{
  								yvm.ecrireChaine(YakaTokenManager.chaineLue);
  								yvmAsm.ecrireChaine(YakaTokenManager.chaineLue);
  							}
  
  ) ")"  
  | <ALALIGNE>				{
   								yvm.aLaLigne();
   								yvmAsm.aLaLigne();
   							}
}


void iteration() : {}
{
	<TANTQUE> {	ite.push();
				yvm.faire(ite.peek());
				yvmAsm.faire(ite.peek());
			  }
	expression() {
					if (!(exp.tipToString(exp.popType()).equals("BOOLEEN"))){
						System.out.println("Une expression booleenne est attendu");
					}else{
						yvm.iffaux("FAIT"+ite.peek());
						yvmAsm.iffaux("FAIT"+ite.peek());
					}
					
				 }
	<FAIRE>
		suiteInstr()
	<FAIT> {
			yvm.jump("FAIRE"+ite.peek());
			yvmAsm.jump("FAIRE"+ite.peek());
			yvm.fait(ite.peek());
			yvmAsm.fait(ite.pop());
		   }
}



void conditionnelle() : {}
{
	 
	<SI> expression() { 
							if (!(exp.tipToString(exp.popType()).equals("BOOLEEN"))){
								System.out.println("Une expression booleenne est attendu");
							}
							
							cond.push();
							yvm.iffaux("SINON"+cond.peek());
							yvmAsm.iffaux("SINON"+cond.peek());
						}
	<ALORS> suiteInstr(){
							yvm.jump("FSI"+cond.peek());
							yvmAsm.jump("FSI"+cond.peek());
							
							yvm.sinon(cond.peek());
			  				yvmAsm.sinon(cond.peek());
						}
	( <SINON> suiteInstr() )?
	<FSI> { 
			yvm.fsi(cond.peek());
			yvmAsm.fsi(cond.pop());	
		  }
		  
}


/*
 * Expression .
 */
void expression() : {}
{
  simpleExpr() 
  (opRel()
  simpleExpr() {
  				Expression.Op o = exp.peekOpera();
	   			switch(o){
	   				case EGAL :
	   					yvm.iegal();
	   					yvmAsm.iegal();
	   					break;
	   				case DIFF :
	   					yvm.idiff();
	   					yvmAsm.idiff();
	   					break;
	   				case INF :
	   					yvm.iinf();
	   					yvmAsm.iinf();
	   					break;
	   				case INFEGAL :
	   					yvm.iinfegal();
	   					yvmAsm.iinfegal();
	   					break;
	   				case SUP :
	   					yvm.isup();
	   					yvmAsm.isup();
	   					break;
	   				case SUPEGAL :
	   					yvm.isupegal();
	   					yvmAsm.isupegal();
	   					break;
	   				default :
	   			}
  				exp.testType2Argv();
  				}

  )?
}



void simpleExpr() : {}
{
   terme() 
   (opAdd()
   terme() {
   			Expression.Op o = exp.peekOpera();
   			switch(o){
   				case PLUS :
   					yvm.iadd();
   					yvmAsm.iadd();
   					break;
   				case MOINS :
   					yvm.isub();
   					yvmAsm.isub();
   					break;
   				case OU :
   					yvm.ior();
   					yvmAsm.ior();
   					break;
   				default :
   			}
   			exp.testType2Argv();
   			}

   )*
} 
void terme() : {}
{
  facteur() 
  (opMul()
  facteur()	{
  			Expression.Op o = exp.peekOpera();
   			switch(o){
   				case MUL :
   					yvm.imul();
   					yvmAsm.imul();
   					break;
   				case DIV :
   					yvm.idiv();
   					yvmAsm.idiv();
   					break;
   				case ET :
   					yvm.iand();
   					yvmAsm.iand();
   					break;
   				default :
   			}
  			exp.testType2Argv();
  			}

  )*
}
void facteur() : {}
{   primaire() 
  |  opNeg() primaire() {
  						Expression.Op o = exp.peekOpera();
			   			switch(o){
			   				case NON :
			   					yvm.inot();
			   					yvmAsm.inot();
			   					break;
			   				case MOINS :
			   					yvm.ineg();
			   					yvmAsm.ineg();
			   					break;
			   				default :
			   			}
  						exp.testType1Argv();
  						} 
}

void primaire (): {}
{
   valeur()
 | "(" expression() ")" 
 
}

void valeur () : {}

{ <entier> 	{	
				exp.saveType(Expression.Tip.ENTIER);
				yvm.iconst(YakaTokenManager.entierLu);
				yvmAsm.iconst(YakaTokenManager.entierLu);
			} 		

 | <ident> 	{	if (tabIdent.existeIdentGlob(YakaTokenManager.identLu)){
 					fonc.push(YakaTokenManager.identLu);
 					yvm.reserveRetour();
 					yvmAsm.reserveRetour();
		 		}else if(tabIdent.existeIdentLoc(YakaTokenManager.identLu)){
		 			exp.saveType(exp.stringToTip(tabIdent.chercheIdentLoc(YakaTokenManager.identLu).getType()));
		 			if(tabIdent.chercheIdentLoc(YakaTokenManager.identLu) instanceof IdConst){
		 				yvm.iconst(((IdConst) tabIdent.chercheIdentLoc(YakaTokenManager.identLu)).getValeur());
		 				yvmAsm.iconst(((IdConst) tabIdent.chercheIdentLoc(YakaTokenManager.identLu)).getValeur());
		 			}else{
		 				yvm.iload(((IdVar) tabIdent.chercheIdentLoc(YakaTokenManager.identLu)).getOffset());
		 				yvmAsm.iload(((IdVar) tabIdent.chercheIdentLoc(YakaTokenManager.identLu)).getOffset());
		 			}
 				}else System.out.println("Variable ou fonction non declaree");
 				
	 		} 
 (argumentsFonction())?	
 						
 | <VRAI> 	{	
 				exp.saveType(Expression.Tip.BOOL);
 				yvm.iconst(-1);
				yvmAsm.iconst(-1);
 			} 
 | <FAUX> 	{	
 				exp.saveType(Expression.Tip.BOOL);
 				yvm.iconst(0);
				yvmAsm.iconst(0);
 			} 

 
}

void opRel() : {}
{

   "=" 		{exp.saveOp(Expression.Op.EGAL);}
 | "<>" 	{exp.saveOp(Expression.Op.DIFF);}
 | "<" 		{exp.saveOp(Expression.Op.INF);}
 | "<=" 	{exp.saveOp(Expression.Op.INFEGAL);}
 | ">" 		{exp.saveOp(Expression.Op.SUP);}
 | ">=" 	{exp.saveOp(Expression.Op.SUPEGAL);}

} 

void opAdd() : {}
{

    "+"	 {exp.saveOp(Expression.Op.PLUS);}	
  |  "-" {exp.saveOp(Expression.Op.MOINS);}	
  | <OU> {exp.saveOp(Expression.Op.OU);}	

}

void opMul() : {}
{

  "*"	{exp.saveOp(Expression.Op.MUL);}	
  | "/"	{exp.saveOp(Expression.Op.DIV);}	
  | <ET> {exp.saveOp(Expression.Op.ET);}	

} 

void opNeg() : {}
{ 
 "-" 		{exp.saveOp(Expression.Op.MOINS);}	
 | <NON>	{exp.saveOp(Expression.Op.NON);}
}


void declFonction() : {}
{
	type() {typeRetourFct = declaration.getSaveName();}
	<FONCTION>
	<ident> {
  				if(tabIdent.existeIdentGlob(YakaTokenManager.identLu)){
  					System.out.println("Erreur : Fonction deja  declaree");
  				}else{
  					nomFct=YakaTokenManager.identLu;
  					tabIdent.rangeIdentGlob(nomFct, declaration.createIdentFonc(typeRetourFct));
  					yvm.etiquetteFonc(nomFct);
  					yvmAsm.etiquetteFonc(nomFct);
  				}
  			
	}
	paramForms()
	bloc()
	<FFONCTION>
	{
		int nbParam = ((IdFonc)tabIdent.chercheIdentGlob(nomFct)).getNbParam();
		yvm.fermeBloc(nbParam * 2);
		yvmAsm.fermeBloc(nbParam * 2);
		tabIdent.clear();
		taille = 0;
	}
}

void paramForms() : {}
{
	"(" (paramForm() ( ","paramForm() )* )? ")"
	{
	  tabIdent.update(((IdFonc)tabIdent.chercheIdentGlob(nomFct)).getNbParam());
	}
	
}


void paramForm() : {}
{
	type()
	<ident>{
		  		if(tabIdent.existeIdentLoc(YakaTokenManager.identLu)){
		 			System.out.println("Erreur : Variable deja declaree");
		  		}else{
		  			((IdFonc)tabIdent.chercheIdentGlob(nomFct)).addParam(declaration.getSaveName());
		  			tabIdent.rangeIdentLoc(YakaTokenManager.identLu, 
		  								   declaration.createIdentVar(declaration.getSaveName(), 
		  								   				              ((IdFonc)tabIdent.chercheIdentGlob(nomFct)).getNbParam()
		  								   				             )
		  								  );
		  		}
	  	   }
}

void retourne() : {}
{
	<RETOURNE> {	
					if (inMain){
						System.out.println("Erreur, impossible de retourner une valeur dans le programme principal");
					}
			   }
	expression(){				
					if(!typeRetourFct.equals(exp.tipToString(exp.popType()))){
				 		System.out.println("erreur de type au niveau du retour de la fonction");
					}else{
						if(!inMain){
							int nbParam = ((IdFonc)tabIdent.chercheIdentGlob(nomFct)).getNbParam();
							yvm.ireturn((2*(nbParam+2)));
							yvmAsm.ireturn((2*(nbParam+2)));
						}
					}
				}
}

void argumentsFonction() : {}
{
	"("	{int nbArg = ((IdFonc)tabIdent.chercheIdentGlob(fonc.peek())).getNbParam();}
		(expression() {nbArg--;}
			(
				"," 
				expression(){nbArg--;}
			)*
		)? 
	")" {	if(nbArg > 0){
				System.out.println("Erreur dans le nombre de parametre entrer a la ligne : "+YakaTokenManager.jjFillToken().beginLine+
								   "."+nbArg+" arguments attendus en plus.");
			}else if(nbArg < 0){
				System.out.println("Erreur dans le nombre de parametre entrer a la ligne : "+YakaTokenManager.jjFillToken().beginLine+
								   "."+(-nbArg)+" arguments attendus en moins.");
			}else{
				if(!fonc.isEmpty()){
 						yvm.call(fonc.peek());
 						yvmAsm.call(fonc.pop());
 				}
 			}
		}
}
